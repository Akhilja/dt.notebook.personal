
{"version":19,"variables":[{"version":1,"key":"Indicators","type":"csv","visible":false,"input":"All,candidates,hostGroups,hostGroupCoverage,kubernetes,cloudIntegrations,uniqueProcessGroups,declarativeProcessGroupings,logMonitoring,fullStackCoverage,customServices,uniqueServices,serviceKeyRequests,osServices,calculatedServiceMetrics,webApps,androidApps,iosApps,userTagCoverage,uscm,syntheticMonitors,thirdPartyVulnerabilityAnalytics,codeLevelVulnerabilityAnalytics,runtimeApplicationProtection,slos,releaseIntegrations,workflows,bizEvents,bizEventsOneAgentSources,bizEventsProcessingRules,bizEventsMetricExtractionRules,bizEventsSecurityContextRules,bizEventsBucketAssignmentRules,managementZones,autoTags,manualTags,alertingProfiles,integrations,integrationTypes,metricEvents,extensions,extensionConfigurations,networkZones,ownershipTeams,dashboards,notebooks,auditLogs,oneAgentVersions,activeGateVersions,limits","multiple":true,"defaultValue":["All"]},{"version":1,"key":"Scope","type":"code","visible":false,"input":"import { settingsObjectsClient } from '@dynatrace-sdk/client-classic-environment-v2';\n\nexport default async function() {\n  const config = { schemaIds: 'builtin:management-zones'};\n  const objects = await settingsObjectsClient.getSettingsObjects(config);\n  let managementZones = objects.items.map(el => el.value.name);\n  managementZones = [\"Tenant\", ...managementZones]\n  return managementZones;\n}","multiple":true,"defaultValue":["Tenant"]}],"tiles":{"0":{"type":"markdown","content":" ###### ‚ú≥Ô∏è OneAgent Management"},"1":{"title":"","type":"code","input":"import { clusterVersionClient, oneAgentOnAHostClient } from \"@dynatrace-sdk/client-classic-environment-v1\";\n\nexport default async function() {\n  const startTime = Date.now();\n  let timedOut = false;\n  // Check if that tile should be activated based on selected indicators and scope\n  if($Indicators[0] === \"All\" || $Indicators.includes(\"oneAgentVersions\")) {\n    // Determine the latest OneAgent version supported by Dynatrace.\n    let objects = await clusterVersionClient.getVersion();\n    const latestSupportedVersion = objects.version.split('.')[1];\n    const nonRecentOneAgentVersion = latestSupportedVersion - 6;\n    const oldestSupportedVersion = latestSupportedVersion - 20;\n    // List hosts that are running non-recent (> 3 months old) OneAgent versions\n    const config = {\n      agentVersionIs: \"LOWER\",\n      agentVersionNumber: `1.${nonRecentOneAgentVersion}.0`,\n      includeDetails: false,\n      startTimestamp: Date.now() - 5 * 60 * 1000\n    };\n    if($Scope[0] !== 'Tenant') config['managementZone'] = $Scope[0];\n    let hosts = [];\n    objects = await oneAgentOnAHostClient.getHostsWithSpecificAgents(config);\n    hosts = [...hosts, ...objects.hosts];\n    // Loop through pagination\n    while(objects.nextPageKey) {\n      if(Date.now() - startTime < 110000) {\n      config.nextPageKey = objects.nextPageKey;\n      objects = await oneAgentOnAHostClient.getHostsWithSpecificAgents(config);\n      hosts = [...hosts, ...objects.hosts];        \n      } else {\n        timedOut = true;\n        objects.nextPageKey = null;\n      }\n    }\n    // Remove hosts with no OneAgent version detected\n    let nonRecentOneAgents = hosts.filter((e) => {\n      if(e.hostInfo.agentVersion && e.hostInfo.agentVersion.minor) {\n        return true;\n      } else {\n        return false;\n      }\n    });\n    // Count non-recent and unsupported running OneAgents\n    let oldOneAgents = 0;\n    let unsupportedOneAgents = 0;\n    for(let nonRecentOneAgent of nonRecentOneAgents) {\n      if(nonRecentOneAgent.hostInfo.agentVersion.minor < oldestSupportedVersion) {\n        unsupportedOneAgents++;\n      } else {\n        oldOneAgents++;\n      }\n    }\n    const score = (unsupportedOneAgents > 0) ? 0 : ((oldOneAgents > 0) ? 0.5 : 1);\n    let result = {};\n    switch(true) {\n      case score === 1:\n        result = `‚úÖ ${unsupportedOneAgents}${timedOut ? '+' : ''}`;\n        break;\n      case score === 0.5:\n        result = `üí° ${unsupportedOneAgents}${timedOut ? '+' : ''}`;\n        break;\n      case score === 0:\n        result = `‚ö†Ô∏è ${unsupportedOneAgents}${timedOut ? '+' : ''}`;\n        break;\n    }\n    return result;\n  } else {\n    return \"N/A\";\n  }\n}","visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","categoricalBarChartSettings":{"categoryAxis":["element"],"categoryAxisLabel":"element","valueAxis":[],"valueAxisLabel":"","tooltipVariant":"single"},"truncationMode":"middle","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"}},"singleValue":{"showLabel":true,"label":"Unsupported OneAgents","autoscale":false,"recordField":"element","trend":{"trendType":"auto","isVisible":false}},"table":{"enableLineWrap":true,"hiddenColumns":[],"lineWrapIds":[],"columnTypeOverrides":[]},"honeycomb":{"shape":"square","dataMappings":{"value":"element"},"legend":"auto","displayedFields":["element"],"colorMode":"color-palette","colorPalette":"categorical"},"histogram":{"dataMappings":[],"variant":"single","displayedFields":["element"]},"label":{"showLabel":false},"icon":{"showIcon":false,"icon":""},"valueBoundaries":{"min":"auto","max":"auto"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"2":{"title":"","type":"code","input":"import { clusterVersionClient, oneAgentOnAHostClient } from \"@dynatrace-sdk/client-classic-environment-v1\";\n\nexport default async function() {\n  const startTime = Date.now();\n  let timedOut = false;\n  // Check if that tile should be activated based on selected indicators and scope\n  if($Indicators[0] === \"All\" || $Indicators.includes(\"oneAgentVersions\")) {\n    // Determine the latest OneAgent version supported by Dynatrace.\n    let objects = await clusterVersionClient.getVersion();\n    const latestSupportedVersion = objects.version.split('.')[1];\n    const nonRecentOneAgentVersion = latestSupportedVersion - 6;\n    const oldestSupportedVersion = latestSupportedVersion - 20;\n    // List hosts that are running recent OneAgent versions\n    const config = {\n      agentVersionIs: \"GREATER_EQUAL\",\n      agentVersionNumber: `1.${nonRecentOneAgentVersion}.0`,\n      includeDetails: false,\n      startTimestamp: Date.now() - 5 * 60 * 1000\n    };\n    if($Scope[0] !== 'Tenant') config['managementZone'] = $Scope[0];\n    let hosts = [];\n    objects = await oneAgentOnAHostClient.getHostsWithSpecificAgents(config);\n    hosts = [...hosts, ...objects.hosts];\n    // Loop through pagination\n    while(objects.nextPageKey) {\n      if(Date.now() - startTime < 110000) {\n      config.nextPageKey = objects.nextPageKey;\n      objects = await oneAgentOnAHostClient.getHostsWithSpecificAgents(config);\n      hosts = [...hosts, ...objects.hosts];        \n      } else {\n        timedOut = true;\n        objects.nextPageKey = null;\n      }\n    }\n    // Remove hosts with no OneAgent version detected\n    let recentOneAgents = hosts.filter((e) => {\n      if(e.hostInfo.agentVersion && e.hostInfo.agentVersion.minor) {\n        return true;\n      } else {\n        return false;\n      }\n    });\n    return `${recentOneAgents.length}${timedOut ? '+' : ''}`;\n  } else {\n    return \"N/A\";\n  }\n}","visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","categoricalBarChartSettings":{"categoryAxis":["element"],"valueAxis":[],"categoryAxisLabel":"element","valueAxisLabel":"","tooltipVariant":"single"},"truncationMode":"middle","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"}},"singleValue":{"showLabel":true,"label":"Recent OneAgents","autoscale":false,"recordField":"element","trend":{"trendType":"auto","isVisible":false}},"table":{"enableLineWrap":true,"hiddenColumns":[],"lineWrapIds":[],"columnTypeOverrides":[]},"honeycomb":{"shape":"square","dataMappings":{"value":"element"},"displayedFields":["element"],"legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"categorical"},"histogram":{"dataMappings":[],"variant":"single","displayedFields":["element"]},"label":{"showLabel":false},"icon":{"showIcon":false,"icon":""},"valueBoundaries":{"min":"auto","max":"auto"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"3":{"title":"","type":"code","input":"import { clusterVersionClient, oneAgentOnAHostClient } from \"@dynatrace-sdk/client-classic-environment-v1\";\n\nexport default async function() {\n  const startTime = Date.now();\n  let timedOut = false;\n  // Check if that tile should be activated based on selected indicators and scope\n  if($Indicators[0] === \"All\" || $Indicators.includes(\"oneAgentVersions\")) {\n    // Determine the latest OneAgent version supported by Dynatrace.\n    let objects = await clusterVersionClient.getVersion();\n    const latestSupportedVersion = objects.version.split('.')[1];\n    const nonRecentOneAgentVersion = latestSupportedVersion - 6;\n    const oldestSupportedVersion = latestSupportedVersion - 20;\n    // List hosts that are running non-recent (> 3 months old) OneAgent versions\n    const config = {\n      agentVersionIs: \"LOWER\",\n      agentVersionNumber: `1.${nonRecentOneAgentVersion}.0`,\n      includeDetails: false,\n      startTimestamp: Date.now() - 5 * 60 * 1000\n    };\n    if($Scope[0] !== 'Tenant') config['managementZone'] = $Scope[0];\n    let hosts = [];\n    objects = await oneAgentOnAHostClient.getHostsWithSpecificAgents(config);\n    hosts = [...hosts, ...objects.hosts];\n    // Loop through pagination\n    while(objects.nextPageKey) {\n      if(Date.now() - startTime < 110000) {\n      config.nextPageKey = objects.nextPageKey;\n      objects = await oneAgentOnAHostClient.getHostsWithSpecificAgents(config);\n      hosts = [...hosts, ...objects.hosts];        \n      } else {\n        timedOut = true;\n        objects.nextPageKey = null;\n      }\n    }\n    // Remove hosts with no OneAgent version detected\n    let nonRecentOneAgents = hosts.filter((e) => {\n      if(e.hostInfo.agentVersion && e.hostInfo.agentVersion.minor) {\n        return true;\n      } else {\n        return false;\n      }\n    });\n    // Count non-recent and unsupported running OneAgents\n    let oldOneAgents = 0;\n    let unsupportedOneAgents = 0;\n    for(let nonRecentOneAgent of nonRecentOneAgents) {\n      if(nonRecentOneAgent.hostInfo.agentVersion.minor < oldestSupportedVersion) {\n        unsupportedOneAgents++;\n      } else {\n        oldOneAgents++;\n      }\n    }\n    return `${oldOneAgents}${timedOut ? '+' : ''}`;\n  } else {\n    return \"N/A\";\n  }\n}","visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","categoricalBarChartSettings":{"categoryAxis":["element"],"valueAxis":[],"categoryAxisLabel":"element","valueAxisLabel":"","tooltipVariant":"single"},"truncationMode":"middle","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"}},"singleValue":{"showLabel":true,"label":"Old but supported OneAgents","autoscale":false,"recordField":"element","trend":{"trendType":"auto","isVisible":false}},"table":{"enableLineWrap":true,"hiddenColumns":[],"lineWrapIds":[],"columnTypeOverrides":[]},"honeycomb":{"shape":"square","dataMappings":{"value":"element"},"displayedFields":["element"],"legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"categorical"},"histogram":{"dataMappings":[],"variant":"single","displayedFields":["element"]},"label":{"showLabel":false},"icon":{"showIcon":false,"icon":""},"valueBoundaries":{"min":"auto","max":"auto"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"4":{"title":"","type":"code","input":"import { clusterVersionClient } from \"@dynatrace-sdk/client-classic-environment-v1\";\n\nexport default async function() {\n  const objects = await clusterVersionClient.getVersion();\n  return `1.${objects.version.split('.')[1]}`;\n}","visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","categoricalBarChartSettings":{"categoryAxis":["element"],"categoryAxisLabel":"element","valueAxis":[],"valueAxisLabel":"","tooltipVariant":"single"},"truncationMode":"middle","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"}},"singleValue":{"showLabel":true,"label":"Latest OneAgent version (GA)","autoscale":false,"recordField":"element","trend":{"trendType":"auto","isVisible":false}},"table":{"enableLineWrap":true,"hiddenColumns":[],"lineWrapIds":[],"columnTypeOverrides":[]},"honeycomb":{"shape":"square","dataMappings":{"value":"element"},"legend":"auto","displayedFields":["element"],"colorMode":"color-palette","colorPalette":"categorical"},"histogram":{"dataMappings":[],"variant":"single","displayedFields":["element"]},"label":{"showLabel":false},"icon":{"showIcon":false,"icon":""},"valueBoundaries":{"min":"auto","max":"auto"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"5":{"title":"","type":"code","input":"import { clusterVersionClient } from \"@dynatrace-sdk/client-classic-environment-v1\";\n\nexport default async function() {\n  const objects = await clusterVersionClient.getVersion();\n  return `1.${objects.version.split('.')[1] - 24}`;\n}","visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","categoricalBarChartSettings":{"categoryAxis":["element"],"categoryAxisLabel":"element","valueAxis":[],"valueAxisLabel":"","tooltipVariant":"single"},"truncationMode":"middle","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"}},"singleValue":{"showLabel":true,"label":"Oldest supported OneAgent","autoscale":false,"recordField":"element","trend":{"trendType":"auto","isVisible":false}},"table":{"enableLineWrap":true,"hiddenColumns":[],"lineWrapIds":[],"columnTypeOverrides":[]},"honeycomb":{"shape":"square","dataMappings":{"value":"element"},"legend":"auto","displayedFields":["element"],"colorMode":"color-palette","colorPalette":"categorical"},"histogram":{"dataMappings":[],"variant":"single","displayedFields":["element"]},"label":{"showLabel":false},"icon":{"showIcon":false,"icon":""},"valueBoundaries":{"min":"auto","max":"auto"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"6":{"type":"markdown","content":"Keeping the OneAgent running with the most recent versions brings you its latest features, performance and security benefits to stay at the forefront of observability.\n\nEach OneAgent version is [supported](https://www.dynatrace.com/company/trust-center/support-slas/) for 9 months, or 12 months through a Dynatrace ONE Premium subscription.\n\nJoin the [Deployment status page](https://hwz97639.sprint.apps.dynatracelabs.com/ui/apps/dynatrace.classic.deployment.status/ui/deploymentstatus/oneagents?gtf=-2h&gf=all&recentlyConnected=false&timeframeDs=LAST_3_DAY&filters=MONITORED_HOST-INSTALLER_VERSION_LE%3A1.251) and filter unsupported OneAgents by their running version.\n\nGet to know the features and OS/technology support changes brought by each new version in the [Release Notes](https://www.dynatrace.com/support/help/whats-new/release-notes/oneagent).\n\nStay ahead and regularly check the announcements for upcoming [end-of-support](https://www.dynatrace.com/support/help/whats-new/end-of-support-news) events."},"7":{"title":"","type":"code","input":"import { clusterVersionClient, oneAgentOnAHostClient } from \"@dynatrace-sdk/client-classic-environment-v1\";\n\nexport default async function() {\n  const startTime = Date.now();\n  let timedOut = false;\n  // Check if that tile should be activated based on selected indicators and scope\n  if($Indicators[0] === \"All\" || $Indicators.includes(\"oneAgentVersions\")) {\n    // Determine the latest OneAgent version supported by Dynatrace.\n    let objects = await clusterVersionClient.getVersion();\n    const latestSupportedVersion = objects.version.split('.')[1];\n    const nonRecentOneAgentVersion = latestSupportedVersion - 6;\n    const oldestSupportedVersion = latestSupportedVersion - 20;\n    // List hosts that are running non-recent (> 3 months old) OneAgent versions\n    const config = {\n      agentVersionIs: \"LOWER\",\n      agentVersionNumber: `1.${nonRecentOneAgentVersion}.0`,\n      includeDetails: false,\n      startTimestamp: Date.now() - 5 * 60 * 1000\n    };\n    if($Scope[0] !== 'Tenant') config['managementZone'] = $Scope[0];\n    let hosts = [];\n    objects = await oneAgentOnAHostClient.getHostsWithSpecificAgents(config);\n    hosts = [...hosts, ...objects.hosts];\n    // Loop through pagination\n    while(objects.nextPageKey) {\n      if(Date.now() - startTime < 30000) {\n      config.nextPageKey = objects.nextPageKey;\n      objects = await oneAgentOnAHostClient.getHostsWithSpecificAgents(config);\n      hosts = [...hosts, ...objects.hosts];        \n      } else {\n        timedOut = true;\n        objects.nextPageKey = null;\n      }\n    }\n    // Remove hosts with no OneAgent version detected\n    let nonRecentOneAgents = hosts.filter((e) => {\n      if(e.hostInfo.agentVersion && e.hostInfo.agentVersion.minor) {\n        return true;\n      } else {\n        return false;\n      }\n    });\n    // Count non-recent and unsupported running OneAgents\n    let oldOneAgents = 0;\n    let unsupportedOneAgents = 0;\n    for(let nonRecentOneAgent of nonRecentOneAgents) {\n      if(nonRecentOneAgent.hostInfo.agentVersion.minor < oldestSupportedVersion) {\n        unsupportedOneAgents++;\n      } else {\n        oldOneAgents++;\n      }\n    }\n    const score = (unsupportedOneAgents > 0) ? 0 : ((oldOneAgents > 0) ? 0.5 : 1);\n    let result;\n    switch(true) {\n      case score === 1:\n        result = `‚úÖ All deployed OneAgents were recently updated`;\n        break;\n      case score === 0.5:\n        result = `üí° Some older OneAgents should be updated to benefit from the latest features and performance`;\n        break;\n      case score === 0:\n        result = `‚ö†Ô∏è Some OneAgents are running an unsupported version. Update them when possible`;\n        break;\n    }\n   // Return the emojied recommendation\n   return result;\n  } else {\n    return `Select the \"oneAgentVersions\" indicator to include it in the review`;\n  }\n}","visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","categoricalBarChartSettings":{"categoryAxis":["element"],"categoryAxisLabel":"element","valueAxis":[],"valueAxisLabel":"","tooltipVariant":"single"},"truncationMode":"middle","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"}},"singleValue":{"showLabel":false,"label":"element","autoscale":false,"recordField":"element","trend":{"trendType":"auto","isVisible":false}},"table":{"enableLineWrap":true,"hiddenColumns":[],"lineWrapIds":[],"columnTypeOverrides":[]},"honeycomb":{"shape":"square","dataMappings":{"value":"element"},"legend":"auto","displayedFields":["element"],"colorMode":"color-palette","colorPalette":"categorical"},"histogram":{"dataMappings":[],"variant":"single","displayedFields":["element"]},"label":{"showLabel":false},"icon":{"showIcon":false,"icon":""},"valueBoundaries":{"min":"auto","max":"auto"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"8":{"type":"markdown","content":" ###### ‚ú≥Ô∏è Tenant Version"},"9":{"title":"","type":"code","input":"import { clusterVersionClient, deploymentClient } from \"@dynatrace-sdk/client-classic-environment-v1\";\n\n\nexport default async function() {\n    let clusterVersion = await clusterVersionClient.getVersion();\n    console.log(clusterVersion)\n    return {\"cluster version\": clusterVersion.version };\n  } ","visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"categoricalBarChartSettings":{}},"singleValue":{"showLabel":true,"label":"Cluster Version","recordField":"cluster version","autoscale":true,"alignment":"center","colorThresholdTarget":"value","sparklineSettings":{"isVisible":false},"trend":{"isVisible":false}},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[],"columnWidths":{},"columnTypeOverrides":[]},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"categorical","dataMappings":{"value":"cluster version"},"displayedFields":["cluster version"]},"histogram":{"dataMappings":[]}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"10":{"type":"markdown","content":" ###### ‚ú≥Ô∏è ActiveGate Management"},"11":{"title":"","type":"code","input":"import { clusterVersionClient } from \"@dynatrace-sdk/client-classic-environment-v1\";\nimport { activeGatesClient } from '@dynatrace-sdk/client-classic-environment-v2';\n\nexport default async function() {\n  // Check if that tile should be activated based on selected indicators and scope\n  if($Indicators[0] === \"All\" || $Indicators.includes(\"activeGateVersions\")) {\n    if($Scope[0] === \"Tenant\") {\n      // Determine the latest OneAgent version supported by Dynatrace.\n      let objects = await clusterVersionClient.getVersion();\n      const latestSupportedVersion = objects.version.split('.')[1];\n      const oldestSupportedVersion = objects.version.split('.')[1] - 20;\n      // Get all ActiveGates\n      objects = await activeGatesClient.getAllActiveGates();\n      let unsupportedActiveGateCount = 0;\n      // Count unsupported ActiveGates\n      for(let activeGate of objects.activeGates) {\n        if(activeGate.version.substring(2, 5) < oldestSupportedVersion) unsupportedActiveGateCount++;\n      }\n      // Compute local score based on above number\n      const score = objects.activeGates.findIndex(el => el.version.substring(2, 5) < oldestSupportedVersion) > -1 ? 0 : (objects.activeGates.findIndex(el => el.version.substring(2, 5) < (latestSupportedVersion - 6)) > -1 ? 0.5 : 1);\n      let result = {};\n      switch(true) {\n        case score === 1:\n          result = `‚úÖ ${unsupportedActiveGateCount}`;\n          break;\n        case score === 0.5:\n          result = `üí° ${unsupportedActiveGateCount}`;\n          break;\n        case score === 0:\n          result = `‚ö†Ô∏è ${unsupportedActiveGateCount}`;\n          break;\n      }\n     // Return the emojied result\n     return result;\n    } else {\n      return \"N/A\";\n    }\n  } else {\n    return \"N/A\";\n  }\n}","visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","categoricalBarChartSettings":{"categoryAxis":["element"],"categoryAxisLabel":"element","valueAxis":[],"valueAxisLabel":"","tooltipVariant":"single"},"truncationMode":"middle","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"}},"singleValue":{"showLabel":true,"label":"Unsupported ActiveGates","autoscale":false,"recordField":"element","trend":{"trendType":"auto","isVisible":false}},"table":{"enableLineWrap":true,"hiddenColumns":[],"lineWrapIds":[],"columnTypeOverrides":[]},"honeycomb":{"shape":"square","dataMappings":{"value":"element"},"legend":"auto","displayedFields":["element"],"colorMode":"color-palette","colorPalette":"categorical"},"histogram":{"dataMappings":[],"variant":"single","displayedFields":["element"]},"label":{"showLabel":false},"icon":{"showIcon":false,"icon":""},"valueBoundaries":{"min":"auto","max":"auto"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"12":{"title":"","type":"code","input":"import { clusterVersionClient } from \"@dynatrace-sdk/client-classic-environment-v1\";\nimport { activeGatesClient } from '@dynatrace-sdk/client-classic-environment-v2';\n\nexport default async function() {\n  // Check if that tile should be activated based on selected indicators and scope\n  if($Indicators[0] === \"All\" || $Indicators.includes(\"activeGateVersions\")) {\n    if($Scope[0] === \"Tenant\") {\n      // Determine the latest OneAgent version supported by Dynatrace.\n      let objects = await clusterVersionClient.getVersion();\n      const latestSupportedVersion = objects.version.split('.')[1];\n      const oldestSupportedVersion = objects.version.split('.')[1] - 20;\n      // Get all ActiveGates\n      objects = await activeGatesClient.getAllActiveGates();\n      let recentActiveGateCount = 0;\n      // Count ActiveGates running with a recent version\n      for(let activeGate of objects.activeGates) {\n        if((activeGate.version.substring(2, 5) >= (latestSupportedVersion - 6))) recentActiveGateCount++;\n      }\n      return recentActiveGateCount;\n    } else {\n      return \"N/A\";\n    }\n  } else {\n    return \"N/A\";\n  }\n}","visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","categoricalBarChartSettings":{"categoryAxis":["element"],"categoryAxisLabel":"element","valueAxis":["element"],"valueAxisLabel":"element","tooltipVariant":"single"},"truncationMode":"middle","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"}},"singleValue":{"showLabel":true,"label":"Recent ActiveGates","autoscale":false,"recordField":"element","trend":{"trendType":"auto","isVisible":true},"sparklineSettings":{}},"table":{"enableLineWrap":true,"hiddenColumns":[],"lineWrapIds":[],"columnTypeOverrides":[]},"honeycomb":{"shape":"square","dataMappings":{"value":"element"},"displayedFields":[null],"legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"blue"},"histogram":{"dataMappings":[{"valueAxis":"element","rangeAxis":""}],"variant":"single","displayedFields":[]},"valueBoundaries":{"min":"auto","max":"auto"},"label":{"showLabel":false,"label":"element"},"icon":{"showIcon":false,"icon":""},"dataMapping":{"value":"element"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"13":{"title":"","type":"code","input":"import { clusterVersionClient } from \"@dynatrace-sdk/client-classic-environment-v1\";\nimport { activeGatesClient } from '@dynatrace-sdk/client-classic-environment-v2';\n\nexport default async function() {\n  // Check if that tile should be activated based on selected indicators and scope\n  if($Indicators[0] === \"All\" || $Indicators.includes(\"activeGateVersions\")) {\n    if($Scope[0] === \"Tenant\") {\n      // Determine the latest OneAgent version supported by Dynatrace.\n      let objects = await clusterVersionClient.getVersion();\n      const latestSupportedVersion = objects.version.split('.')[1];\n      const oldestSupportedVersion = objects.version.split('.')[1] - 20;\n      // Get all ActiveGates\n      objects = await activeGatesClient.getAllActiveGates();\n      let oldButSupportedActiveGateCount = 0;\n      // Count ActiveGates running with a version that is old but still supported\n      for(let activeGate of objects.activeGates) {\n        if((activeGate.version.substring(2, 5) >= oldestSupportedVersion) && (activeGate.version.substring(2, 5) < (latestSupportedVersion - 6))) oldButSupportedActiveGateCount++;\n      }\n      return oldButSupportedActiveGateCount;\n    } else {\n      return \"N/A\";\n    }\n  } else {\n    return \"N/A\";\n  }\n}","visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","categoricalBarChartSettings":{"categoryAxis":["element"],"categoryAxisLabel":"element","valueAxis":["element"],"valueAxisLabel":"element","tooltipVariant":"single"},"truncationMode":"middle","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"}},"singleValue":{"showLabel":true,"label":"Old but supported ActiveGates","autoscale":false,"recordField":"element","trend":{"trendType":"auto","isVisible":true},"sparklineSettings":{}},"table":{"enableLineWrap":true,"hiddenColumns":[],"lineWrapIds":[],"columnTypeOverrides":[]},"honeycomb":{"shape":"square","dataMappings":{"value":"element"},"displayedFields":[null],"legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"blue"},"histogram":{"dataMappings":[{"valueAxis":"element","rangeAxis":""}],"variant":"single","displayedFields":[]},"valueBoundaries":{"min":"auto","max":"auto"},"label":{"showLabel":false,"label":"element"},"icon":{"showIcon":false,"icon":""},"dataMapping":{"value":"element"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"14":{"title":"","type":"code","input":"import { clusterVersionClient } from \"@dynatrace-sdk/client-classic-environment-v1\";\n\nexport default async function() {\n  const objects = await clusterVersionClient.getVersion();\n  return `1.${objects.version.split('.')[1]}`;\n}","visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","categoricalBarChartSettings":{"categoryAxis":["element"],"categoryAxisLabel":"element","valueAxis":[],"valueAxisLabel":"","tooltipVariant":"single"},"truncationMode":"middle","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"}},"singleValue":{"showLabel":true,"label":"Latest ActiveGate version (GA)","autoscale":false,"recordField":"element","trend":{"trendType":"auto","isVisible":true},"sparklineSettings":{}},"table":{"enableLineWrap":true,"hiddenColumns":[],"lineWrapIds":[],"columnTypeOverrides":[]},"honeycomb":{"shape":"square","dataMappings":{"value":"element"},"legend":"auto","displayedFields":["element"],"colorMode":"color-palette","colorPalette":"categorical"},"histogram":{"dataMappings":[],"variant":"single","displayedFields":["element"]},"valueBoundaries":{"min":"auto","max":"auto"},"label":{"showLabel":false},"icon":{"showIcon":false,"icon":""},"dataMapping":{}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"15":{"title":"","type":"code","input":"import { clusterVersionClient } from \"@dynatrace-sdk/client-classic-environment-v1\";\n\nexport default async function() {\n  const objects = await clusterVersionClient.getVersion();\n  return `1.${objects.version.split('.')[1] - 24}`;\n}","visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","categoricalBarChartSettings":{"categoryAxis":["element"],"categoryAxisLabel":"element","valueAxis":[],"valueAxisLabel":"","tooltipVariant":"single"},"truncationMode":"middle","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"}},"singleValue":{"showLabel":true,"label":"Oldest supported ActiveGate","autoscale":false,"recordField":"element","trend":{"trendType":"auto","isVisible":true},"sparklineSettings":{}},"table":{"enableLineWrap":true,"hiddenColumns":[],"lineWrapIds":[],"columnTypeOverrides":[]},"honeycomb":{"shape":"square","dataMappings":{"value":"element"},"legend":"auto","displayedFields":["element"],"colorMode":"color-palette","colorPalette":"categorical"},"histogram":{"dataMappings":[],"variant":"single","displayedFields":["element"]},"valueBoundaries":{"min":"auto","max":"auto"},"label":{"showLabel":false},"icon":{"showIcon":false,"icon":""},"dataMapping":{}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"16":{"type":"markdown","content":"Keep the ActiveGates updated elevates your capacity for remote monitoring, synthetic testing, manage your observability data flows, increase your security posture and much more.\n\nEach ActiveGate version is [supported](https://www.dynatrace.com/company/trust-center/support-slas/) for 9 months, or 12 months through a Dynatrace ONE Premium subscription.\n\nGet to know the features and OS/technology support changes brought by each new version in the [Release Notes](https://www.dynatrace.com/support/help/whats-new/release-notes/activegate).\n\nStay ahead and regularly check the announcements for upcoming [end-of-support](https://www.dynatrace.com/support/help/whats-new/end-of-support-news#tabgroup--news--dynatrace-activegate) events."},"17":{"title":"","type":"code","input":"import { clusterVersionClient } from \"@dynatrace-sdk/client-classic-environment-v1\";\nimport { activeGatesClient } from '@dynatrace-sdk/client-classic-environment-v2';\n\nexport default async function() {\n  // Check if that tile should be activated based on selected indicators and scope\n  if($Indicators[0] === \"All\" || $Indicators.includes(\"activeGateVersions\")) {\n    if($Scope[0] === \"Tenant\") {\n      // Determine the latest OneAgent version supported by Dynatrace.\n      let objects = await clusterVersionClient.getVersion();\n      const latestSupportedVersion = objects.version.split('.')[1];\n      const oldestSupportedVersion = objects.version.split('.')[1] - 20;\n      // Get all ActiveGates\n      objects = await activeGatesClient.getAllActiveGates();\n      let unsupportedActiveGateCount = 0;\n      // Count unsupported ActiveGates\n      for(let activeGate of objects.activeGates) {\n        if(activeGate.version.substring(2, 5) < oldestSupportedVersion) unsupportedActiveGateCount++;\n      }\n      // Compute local score based on above number\n      const score = objects.activeGates.findIndex(el => el.version.substring(2, 5) < oldestSupportedVersion) > -1 ? 0 : (objects.activeGates.findIndex(el => el.version.substring(2, 5) < (latestSupportedVersion - 6)) > -1 ? 0.5 : 1);\n      let result;\n      switch(true) {\n        case score === 1:\n          result = `‚úÖ All deployed ActiveGates were recently updated`;\n          break;\n        case score === 0.5:\n          result = `üí° Some older ActiveGates should be updated to benefit from the latest features and performance`;\n          break;\n        case score === 0:\n          result = `‚ö†Ô∏è Some ActiveGates are running an unsupported version. Update them when possible`;\n          break;\n      }\n     // Return the emojied recommendation\n     return result;\n    } else {\n      return `Select the \"Tenant\" scope to review ActiveGates`;\n    }\n  } else {\n    return `Select the \"activeGateVersions\" indicator to include it in the review`;\n  }\n}","visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","categoricalBarChartSettings":{"categoryAxis":["element"],"categoryAxisLabel":"element","valueAxis":[],"valueAxisLabel":"","tooltipVariant":"single"},"truncationMode":"middle","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"}},"singleValue":{"showLabel":false,"label":"element","autoscale":false,"recordField":"element","trend":{"trendType":"auto","isVisible":true},"sparklineSettings":{}},"table":{"enableLineWrap":true,"hiddenColumns":[],"lineWrapIds":[],"columnTypeOverrides":[]},"honeycomb":{"shape":"square","dataMappings":{"value":"element"},"legend":"auto","displayedFields":["element"],"colorMode":"color-palette","colorPalette":"categorical"},"histogram":{"dataMappings":[],"variant":"single","displayedFields":["element"]},"valueBoundaries":{"min":"auto","max":"auto"},"label":{"showLabel":false},"icon":{"showIcon":false,"icon":""},"dataMapping":{}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}}},"layouts":{"0":{"x":0,"y":3,"w":24,"h":1},"1":{"x":0,"y":4,"w":6,"h":2},"2":{"x":0,"y":6,"w":3,"h":2},"3":{"x":3,"y":6,"w":3,"h":2},"4":{"x":0,"y":8,"w":3,"h":2},"5":{"x":3,"y":8,"w":3,"h":2},"6":{"x":6,"y":4,"w":10,"h":5},"7":{"x":6,"y":9,"w":10,"h":1},"8":{"x":0,"y":0,"w":24,"h":1},"9":{"x":0,"y":1,"w":5,"h":2},"10":{"x":0,"y":10,"w":24,"h":1},"11":{"x":0,"y":11,"w":6,"h":2},"12":{"x":0,"y":13,"w":3,"h":2},"13":{"x":3,"y":13,"w":3,"h":2},"14":{"x":0,"y":15,"w":3,"h":2},"15":{"x":3,"y":15,"w":3,"h":2},"16":{"x":6,"y":11,"w":10,"h":5},"17":{"x":6,"y":16,"w":10,"h":1}},"importedWithCode":false,"settings":{}}